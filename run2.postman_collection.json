{
	"info": {
		"_postman_id": "e0664b36-8ef2-4f41-a943-98526225ea40",
		"name": "Collection run",
		"description": "### Welcome to Postman! This is your first collection. \n\nCollections are your starting point for building and testing APIs. You can use this one to:\n\n• Group related requests\n• Test your API in real-world scenarios\n• Document and share your requests\n\nUpdate the name and overview whenever you’re ready to make it yours.\n\n[Learn more about Postman Collections.](https://learning.postman.com/docs/collections/collections-overview/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48600896",
		"_collection_link": "https://nanthithad-655400.postman.co/workspace/Nanthitha-Devi's-Workspace~007b900c-17c1-4a98-8e75-57f3b1d97886/collection/48600896-e0664b36-8ef2-4f41-a943-98526225ea40?action=share&source=collection_link&creator=48600896"
	},
	"item": [
		{
			"name": "Get data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// Status code tests",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time under 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Header validation",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// JSON structure validation",
							"pm.test(\"User response structure validation\", function () {",
							"    const user = pm.response.json();",
							"   ",
							"    pm.expect(user).to.be.an('object');",
							"    pm.expect(user).to.have.property('id');",
							"    pm.expect(user).to.have.property('name');",
							"    pm.expect(user).to.have.property('username');",
							"    pm.expect(user).to.have.property('email');",
							"    pm.expect(user).to.have.property('address');",
							"    pm.expect(user).to.have.property('phone');",
							"    pm.expect(user).to.have.property('website');",
							"    pm.expect(user).to.have.property('company');",
							"   ",
							"    // Validate data types",
							"    pm.expect(user.id).to.be.a('number');",
							"    pm.expect(user.name).to.be.a('string');",
							"    pm.expect(user.username).to.be.a('string');",
							"    pm.expect(user.email).to.be.a('string');",
							"    pm.expect(user.address).to.be.an('object');",
							"    pm.expect(user.phone).to.be.a('string');",
							"    pm.expect(user.website).to.be.a('string');",
							"    pm.expect(user.company).to.be.an('object');",
							"});",
							"",
							"// Data value validation",
							"pm.test(\"Email format is valid\", function () {",
							"    const user = pm.response.json();",
							"    pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
							"});",
							"",
							"pm.test(\"Website format is valid (domain check)\", function () {",
							"    const user = pm.response.json();",
							"    // Updated: Check for domain format instead of URL format",
							"    pm.expect(user.website).to.match(/^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\\.[a-zA-Z]{2,}$/);",
							"});",
							"",
							"pm.test(\"Phone format is valid\", function () {",
							"    const user = pm.response.json();",
							"    // Updated: Allow 'x' for extensions in phone numbers",
							"    pm.expect(user.phone).to.match(/^[\\d\\s\\-\\+\\(\\)\\.x]+$/);",
							"});",
							"",
							"// Nested object validation",
							"pm.test(\"Address structure validation\", function () {",
							"    const user = pm.response.json();",
							"    const address = user.address;",
							"   ",
							"    pm.expect(address).to.have.property('street');",
							"    pm.expect(address).to.have.property('suite');",
							"    pm.expect(address).to.have.property('city');",
							"    pm.expect(address).to.have.property('zipcode');",
							"    pm.expect(address).to.have.property('geo');",
							"   ",
							"    pm.expect(address.geo).to.have.property('lat');",
							"    pm.expect(address.geo).to.have.property('lng');",
							"   ",
							"    // Validate geo coordinates format",
							"    pm.expect(address.geo.lat).to.match(/^\\-?\\d+\\.\\d+$/);",
							"    pm.expect(address.geo.lng).to.match(/^\\-?\\d+\\.\\d+$/);",
							"});",
							"",
							"// Company structure validation",
							"pm.test(\"Company structure validation\", function () {",
							"    const user = pm.response.json();",
							"    const company = user.company;",
							"   ",
							"    pm.expect(company).to.have.property('name');",
							"    pm.expect(company).to.have.property('catchPhrase');",
							"    pm.expect(company).to.have.property('bs');",
							"   ",
							"    // Validate company data types",
							"    pm.expect(company.name).to.be.a('string');",
							"    pm.expect(company.catchPhrase).to.be.a('string');",
							"    pm.expect(company.bs).to.be.a('string');",
							"});",
							"",
							"// Specific value validation for known user",
							"pm.test(\"User ID 1 has expected values\", function () {",
							"    const user = pm.response.json();",
							"   ",
							"    if (user.id === 1) {",
							"        pm.expect(user.name).to.equal(\"Leanne Graham\");",
							"        pm.expect(user.username).to.equal(\"Bret\");",
							"        pm.expect(user.email).to.equal(\"Sincere@april.biz\");",
							"        pm.expect(user.phone).to.equal(\"1-770-736-8031 x56442\");",
							"        pm.expect(user.website).to.equal(\"hildegard.org\");",
							"    }",
							"});",
							"",
							"// Validate value ranges and patterns",
							"pm.test(\"User ID is positive number\", function () {",
							"    const user = pm.response.json();",
							"    pm.expect(user.id).to.be.above(0);",
							"});",
							"",
							"pm.test(\"Username is valid format\", function () {",
							"    const user = pm.response.json();",
							"    pm.expect(user.username).to.match(/^[a-zA-Z0-9_]+$/);",
							"});",
							"",
							"pm.test(\"Zipcode format is valid\", function () {",
							"    const user = pm.response.json();",
							"    // Basic zipcode validation (allows for different country formats)",
							"    pm.expect(user.address.zipcode).to.match(/^[a-zA-Z0-9\\- ]+$/);",
							"});",
							"",
							"// Extract data for future use",
							"pm.test(\"Extract user data\", function () {",
							"    const user = pm.response.json();",
							"    pm.environment.set(\"user_id\", user.id);",
							"    pm.environment.set(\"user_email\", user.email);",
							"    pm.environment.set(\"user_name\", user.name);",
							"   ",
							"    console.log(`Extracted user: ${user.name} (${user.email})`);",
							"    console.log(`User ID stored: ${pm.environment.get(\"user_id\")}`);",
							"});",
							"",
							"// Performance logging",
							"pm.test(\"Log performance metrics\", function () {",
							"    console.log(`Response time: ${pm.response.responseTime}ms`);",
							"    console.log(`Response size: ${pm.response.responseSize} bytes`);",
							"    console.log(`Status: ${pm.response.code} ${pm.response.status}`);",
							"});",
							"",
							"// Final summary",
							"pm.test(\"All validations completed\", function () {",
							"    console.log(\"✅ All user data validation tests executed\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users",
						"1"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "demo",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n    \"userId\": 1,\r\n    \"id\": 8,\r\n    \"title\": \"API Testing\",\r\n    \"completed\": true\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://webhook.site/2af28140-448e-4de3-9397-16a72475e34d",
					"protocol": "https",
					"host": [
						"webhook",
						"site"
					],
					"path": [
						"2af28140-448e-4de3-9397-16a72475e34d"
					]
				}
			},
			"response": []
		}
	]
}