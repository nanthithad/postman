{
  "collection": {
    "_": {
      "postman_id": "e0664b36-8ef2-4f41-a943-98526225ea40",
      "exporter_id": "48600896",
      "collection_link": "https://nanthithad-655400.postman.co/workspace/Nanthitha-Devi's-Workspace~007b900c-17c1-4a98-8e75-57f3b1d97886/collection/48600896-e0664b36-8ef2-4f41-a943-98526225ea40?action=share&source=collection_link&creator=48600896"
    },
    "item": [
      {
        "id": "a4a7de98-811c-4079-bca7-88cb50238787",
        "name": "Get data",
        "request": {
          "description": {
            "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "users",
              "1"
            ],
            "host": [
              "jsonplaceholder",
              "typicode",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "57630116-e7af-45b3-b943-909f75e14a5b",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "",
                "// Status code tests",
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"Response time under 2000ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                "});",
                "",
                "// Header validation",
                "pm.test(\"Content-Type is application/json\", function () {",
                "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                "});",
                "",
                "// JSON structure validation",
                "pm.test(\"User response structure validation\", function () {",
                "    const user = pm.response.json();",
                "   ",
                "    pm.expect(user).to.be.an('object');",
                "    pm.expect(user).to.have.property('id');",
                "    pm.expect(user).to.have.property('name');",
                "    pm.expect(user).to.have.property('username');",
                "    pm.expect(user).to.have.property('email');",
                "    pm.expect(user).to.have.property('address');",
                "    pm.expect(user).to.have.property('phone');",
                "    pm.expect(user).to.have.property('website');",
                "    pm.expect(user).to.have.property('company');",
                "   ",
                "    // Validate data types",
                "    pm.expect(user.id).to.be.a('number');",
                "    pm.expect(user.name).to.be.a('string');",
                "    pm.expect(user.username).to.be.a('string');",
                "    pm.expect(user.email).to.be.a('string');",
                "    pm.expect(user.address).to.be.an('object');",
                "    pm.expect(user.phone).to.be.a('string');",
                "    pm.expect(user.website).to.be.a('string');",
                "    pm.expect(user.company).to.be.an('object');",
                "});",
                "",
                "// Data value validation",
                "pm.test(\"Email format is valid\", function () {",
                "    const user = pm.response.json();",
                "    pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                "});",
                "",
                "pm.test(\"Website format is valid (domain check)\", function () {",
                "    const user = pm.response.json();",
                "    // Updated: Check for domain format instead of URL format",
                "    pm.expect(user.website).to.match(/^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\\.[a-zA-Z]{2,}$/);",
                "});",
                "",
                "pm.test(\"Phone format is valid\", function () {",
                "    const user = pm.response.json();",
                "    // Updated: Allow 'x' for extensions in phone numbers",
                "    pm.expect(user.phone).to.match(/^[\\d\\s\\-\\+\\(\\)\\.x]+$/);",
                "});",
                "",
                "// Nested object validation",
                "pm.test(\"Address structure validation\", function () {",
                "    const user = pm.response.json();",
                "    const address = user.address;",
                "   ",
                "    pm.expect(address).to.have.property('street');",
                "    pm.expect(address).to.have.property('suite');",
                "    pm.expect(address).to.have.property('city');",
                "    pm.expect(address).to.have.property('zipcode');",
                "    pm.expect(address).to.have.property('geo');",
                "   ",
                "    pm.expect(address.geo).to.have.property('lat');",
                "    pm.expect(address.geo).to.have.property('lng');",
                "   ",
                "    // Validate geo coordinates format",
                "    pm.expect(address.geo.lat).to.match(/^\\-?\\d+\\.\\d+$/);",
                "    pm.expect(address.geo.lng).to.match(/^\\-?\\d+\\.\\d+$/);",
                "});",
                "",
                "// Company structure validation",
                "pm.test(\"Company structure validation\", function () {",
                "    const user = pm.response.json();",
                "    const company = user.company;",
                "   ",
                "    pm.expect(company).to.have.property('name');",
                "    pm.expect(company).to.have.property('catchPhrase');",
                "    pm.expect(company).to.have.property('bs');",
                "   ",
                "    // Validate company data types",
                "    pm.expect(company.name).to.be.a('string');",
                "    pm.expect(company.catchPhrase).to.be.a('string');",
                "    pm.expect(company.bs).to.be.a('string');",
                "});",
                "",
                "// Specific value validation for known user",
                "pm.test(\"User ID 1 has expected values\", function () {",
                "    const user = pm.response.json();",
                "   ",
                "    if (user.id === 1) {",
                "        pm.expect(user.name).to.equal(\"Leanne Graham\");",
                "        pm.expect(user.username).to.equal(\"Bret\");",
                "        pm.expect(user.email).to.equal(\"Sincere@april.biz\");",
                "        pm.expect(user.phone).to.equal(\"1-770-736-8031 x56442\");",
                "        pm.expect(user.website).to.equal(\"hildegard.org\");",
                "    }",
                "});",
                "",
                "// Validate value ranges and patterns",
                "pm.test(\"User ID is positive number\", function () {",
                "    const user = pm.response.json();",
                "    pm.expect(user.id).to.be.above(0);",
                "});",
                "",
                "pm.test(\"Username is valid format\", function () {",
                "    const user = pm.response.json();",
                "    pm.expect(user.username).to.match(/^[a-zA-Z0-9_]+$/);",
                "});",
                "",
                "pm.test(\"Zipcode format is valid\", function () {",
                "    const user = pm.response.json();",
                "    // Basic zipcode validation (allows for different country formats)",
                "    pm.expect(user.address.zipcode).to.match(/^[a-zA-Z0-9\\- ]+$/);",
                "});",
                "",
                "// Extract data for future use",
                "pm.test(\"Extract user data\", function () {",
                "    const user = pm.response.json();",
                "    pm.environment.set(\"user_id\", user.id);",
                "    pm.environment.set(\"user_email\", user.email);",
                "    pm.environment.set(\"user_name\", user.name);",
                "   ",
                "    console.log(`Extracted user: ${user.name} (${user.email})`);",
                "    console.log(`User ID stored: ${pm.environment.get(\"user_id\")}`);",
                "});",
                "",
                "// Performance logging",
                "pm.test(\"Log performance metrics\", function () {",
                "    console.log(`Response time: ${pm.response.responseTime}ms`);",
                "    console.log(`Response size: ${pm.response.responseSize} bytes`);",
                "    console.log(`Status: ${pm.response.code} ${pm.response.status}`);",
                "});",
                "",
                "// Final summary",
                "pm.test(\"All validations completed\", function () {",
                "    console.log(\"âœ… All user data validation tests executed\");",
                "});",
                "",
                ""
              ],
              "_lastExecutionId": "8b7c5710-900d-44a9-b590-b60d23bb0c2a"
            }
          }
        ]
      },
      {
        "id": "eea84a96-01b0-4fa2-8e9f-72653056d806",
        "name": "demo",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "2af28140-448e-4de3-9397-16a72475e34d"
            ],
            "host": [
              "webhook",
              "site"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": " {\r\n    \"userId\": 1,\r\n    \"id\": 8,\r\n    \"title\": \"API Testing\",\r\n    \"completed\": true\r\n  }",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "e0664b36-8ef2-4f41-a943-98526225ea40",
      "name": "Collection run",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "### Welcome to Postman! This is your first collection. \n\nCollections are your starting point for building and testing APIs. You can use this one to:\n\nâ€¢ Group related requests\nâ€¢ Test your API in real-world scenarios\nâ€¢ Document and share your requests\n\nUpdate the name and overview whenever youâ€™re ready to make it yours.\n\n[Learn more about Postman Collections.](https://learning.postman.com/docs/collections/collections-overview/)",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "4e4df5aa-8a42-4052-8955-a028b1795d21",
    "values": [
      {
        "type": "any",
        "value": 1,
        "key": "user_id"
      },
      {
        "type": "any",
        "value": "Sincere@april.biz",
        "key": "user_email"
      },
      {
        "type": "any",
        "value": "Leanne Graham",
        "key": "user_name"
      }
    ]
  },
  "globals": {
    "id": "886be8ff-b4f3-4c88-a3a2-815c474ebfc5",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 2,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 2,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 2,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 2,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 475.5,
      "responseMin": 319,
      "responseMax": 632,
      "responseSd": 156.5,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1758694969290,
      "completed": 1758694970462
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 2,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c585f5d5-7f0d-4f8b-86e9-7878927e6b1b",
          "httpRequestId": "e0034389-79d9-495c-8885-8aa72d1b91f9"
        },
        "item": {
          "id": "a4a7de98-811c-4079-bca7-88cb50238787",
          "name": "Get data",
          "request": {
            "description": {
              "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "users",
                "1"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "57630116-e7af-45b3-b943-909f75e14a5b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "",
                  "// Status code tests",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time under 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "// Header validation",
                  "pm.test(\"Content-Type is application/json\", function () {",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                  "});",
                  "",
                  "// JSON structure validation",
                  "pm.test(\"User response structure validation\", function () {",
                  "    const user = pm.response.json();",
                  "   ",
                  "    pm.expect(user).to.be.an('object');",
                  "    pm.expect(user).to.have.property('id');",
                  "    pm.expect(user).to.have.property('name');",
                  "    pm.expect(user).to.have.property('username');",
                  "    pm.expect(user).to.have.property('email');",
                  "    pm.expect(user).to.have.property('address');",
                  "    pm.expect(user).to.have.property('phone');",
                  "    pm.expect(user).to.have.property('website');",
                  "    pm.expect(user).to.have.property('company');",
                  "   ",
                  "    // Validate data types",
                  "    pm.expect(user.id).to.be.a('number');",
                  "    pm.expect(user.name).to.be.a('string');",
                  "    pm.expect(user.username).to.be.a('string');",
                  "    pm.expect(user.email).to.be.a('string');",
                  "    pm.expect(user.address).to.be.an('object');",
                  "    pm.expect(user.phone).to.be.a('string');",
                  "    pm.expect(user.website).to.be.a('string');",
                  "    pm.expect(user.company).to.be.an('object');",
                  "});",
                  "",
                  "// Data value validation",
                  "pm.test(\"Email format is valid\", function () {",
                  "    const user = pm.response.json();",
                  "    pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                  "});",
                  "",
                  "pm.test(\"Website format is valid (domain check)\", function () {",
                  "    const user = pm.response.json();",
                  "    // Updated: Check for domain format instead of URL format",
                  "    pm.expect(user.website).to.match(/^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\\.[a-zA-Z]{2,}$/);",
                  "});",
                  "",
                  "pm.test(\"Phone format is valid\", function () {",
                  "    const user = pm.response.json();",
                  "    // Updated: Allow 'x' for extensions in phone numbers",
                  "    pm.expect(user.phone).to.match(/^[\\d\\s\\-\\+\\(\\)\\.x]+$/);",
                  "});",
                  "",
                  "// Nested object validation",
                  "pm.test(\"Address structure validation\", function () {",
                  "    const user = pm.response.json();",
                  "    const address = user.address;",
                  "   ",
                  "    pm.expect(address).to.have.property('street');",
                  "    pm.expect(address).to.have.property('suite');",
                  "    pm.expect(address).to.have.property('city');",
                  "    pm.expect(address).to.have.property('zipcode');",
                  "    pm.expect(address).to.have.property('geo');",
                  "   ",
                  "    pm.expect(address.geo).to.have.property('lat');",
                  "    pm.expect(address.geo).to.have.property('lng');",
                  "   ",
                  "    // Validate geo coordinates format",
                  "    pm.expect(address.geo.lat).to.match(/^\\-?\\d+\\.\\d+$/);",
                  "    pm.expect(address.geo.lng).to.match(/^\\-?\\d+\\.\\d+$/);",
                  "});",
                  "",
                  "// Company structure validation",
                  "pm.test(\"Company structure validation\", function () {",
                  "    const user = pm.response.json();",
                  "    const company = user.company;",
                  "   ",
                  "    pm.expect(company).to.have.property('name');",
                  "    pm.expect(company).to.have.property('catchPhrase');",
                  "    pm.expect(company).to.have.property('bs');",
                  "   ",
                  "    // Validate company data types",
                  "    pm.expect(company.name).to.be.a('string');",
                  "    pm.expect(company.catchPhrase).to.be.a('string');",
                  "    pm.expect(company.bs).to.be.a('string');",
                  "});",
                  "",
                  "// Specific value validation for known user",
                  "pm.test(\"User ID 1 has expected values\", function () {",
                  "    const user = pm.response.json();",
                  "   ",
                  "    if (user.id === 1) {",
                  "        pm.expect(user.name).to.equal(\"Leanne Graham\");",
                  "        pm.expect(user.username).to.equal(\"Bret\");",
                  "        pm.expect(user.email).to.equal(\"Sincere@april.biz\");",
                  "        pm.expect(user.phone).to.equal(\"1-770-736-8031 x56442\");",
                  "        pm.expect(user.website).to.equal(\"hildegard.org\");",
                  "    }",
                  "});",
                  "",
                  "// Validate value ranges and patterns",
                  "pm.test(\"User ID is positive number\", function () {",
                  "    const user = pm.response.json();",
                  "    pm.expect(user.id).to.be.above(0);",
                  "});",
                  "",
                  "pm.test(\"Username is valid format\", function () {",
                  "    const user = pm.response.json();",
                  "    pm.expect(user.username).to.match(/^[a-zA-Z0-9_]+$/);",
                  "});",
                  "",
                  "pm.test(\"Zipcode format is valid\", function () {",
                  "    const user = pm.response.json();",
                  "    // Basic zipcode validation (allows for different country formats)",
                  "    pm.expect(user.address.zipcode).to.match(/^[a-zA-Z0-9\\- ]+$/);",
                  "});",
                  "",
                  "// Extract data for future use",
                  "pm.test(\"Extract user data\", function () {",
                  "    const user = pm.response.json();",
                  "    pm.environment.set(\"user_id\", user.id);",
                  "    pm.environment.set(\"user_email\", user.email);",
                  "    pm.environment.set(\"user_name\", user.name);",
                  "   ",
                  "    console.log(`Extracted user: ${user.name} (${user.email})`);",
                  "    console.log(`User ID stored: ${pm.environment.get(\"user_id\")}`);",
                  "});",
                  "",
                  "// Performance logging",
                  "pm.test(\"Log performance metrics\", function () {",
                  "    console.log(`Response time: ${pm.response.responseTime}ms`);",
                  "    console.log(`Response size: ${pm.response.responseSize} bytes`);",
                  "    console.log(`Status: ${pm.response.code} ${pm.response.status}`);",
                  "});",
                  "",
                  "// Final summary",
                  "pm.test(\"All validations completed\", function () {",
                  "    console.log(\"âœ… All user data validation tests executed\");",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "8b7c5710-900d-44a9-b590-b60d23bb0c2a"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "users",
              "1"
            ],
            "host": [
              "jsonplaceholder",
              "typicode",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4a157aad-4952-4d6e-aa3e-5ba2ed287bb3",
              "system": true
            },
            {
              "key": "Host",
              "value": "jsonplaceholder.typicode.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "48680d7a-0e91-4673-8ce5-d89b2cf92878",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 24 Sep 2025 06:19:02 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "Cache-Control",
              "value": "max-age=43200"
            },
            {
              "key": "etag",
              "value": "W/\"1fd-+2Y3G3w049iSZtw5t1mzSnunngE\""
            },
            {
              "key": "expires",
              "value": "-1"
            },
            {
              "key": "nel",
              "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
            },
            {
              "key": "pragma",
              "value": "no-cache"
            },
            {
              "key": "report-to",
              "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=K3FrG%2FM84H4VjvOlk6UfeXkDbhDCD78j5f1ela%2BeqYY%3D\\u0026sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d\\u0026ts=1755340496\"}],\"max_age\":3600}"
            },
            {
              "key": "reporting-endpoints",
              "value": "heroku-nel=\"https://nel.heroku.com/reports?s=K3FrG%2FM84H4VjvOlk6UfeXkDbhDCD78j5f1ela%2BeqYY%3D&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&ts=1755340496\""
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "vary",
              "value": "Origin, Accept-Encoding"
            },
            {
              "key": "via",
              "value": "2.0 heroku-router"
            },
            {
              "key": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "x-ratelimit-limit",
              "value": "1000"
            },
            {
              "key": "x-ratelimit-remaining",
              "value": "999"
            },
            {
              "key": "x-ratelimit-reset",
              "value": "1755340541"
            },
            {
              "key": "Age",
              "value": "18410"
            },
            {
              "key": "cf-cache-status",
              "value": "HIT"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "CF-RAY",
              "value": "98402afd5f5a7f40-MAA"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              44,
              10,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              76,
              101,
              97,
              110,
              110,
              101,
              32,
              71,
              114,
              97,
              104,
              97,
              109,
              34,
              44,
              10,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              66,
              114,
              101,
              116,
              34,
              44,
              10,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              83,
              105,
              110,
              99,
              101,
              114,
              101,
              64,
              97,
              112,
              114,
              105,
              108,
              46,
              98,
              105,
              122,
              34,
              44,
              10,
              32,
              32,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              116,
              114,
              101,
              101,
              116,
              34,
              58,
              32,
              34,
              75,
              117,
              108,
              97,
              115,
              32,
              76,
              105,
              103,
              104,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              117,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              65,
              112,
              116,
              46,
              32,
              53,
              53,
              54,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              32,
              34,
              71,
              119,
              101,
              110,
              98,
              111,
              114,
              111,
              117,
              103,
              104,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              122,
              105,
              112,
              99,
              111,
              100,
              101,
              34,
              58,
              32,
              34,
              57,
              50,
              57,
              57,
              56,
              45,
              51,
              56,
              55,
              52,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              103,
              101,
              111,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              97,
              116,
              34,
              58,
              32,
              34,
              45,
              51,
              55,
              46,
              51,
              49,
              53,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              110,
              103,
              34,
              58,
              32,
              34,
              56,
              49,
              46,
              49,
              52,
              57,
              54,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              32,
              34,
              49,
              45,
              55,
              55,
              48,
              45,
              55,
              51,
              54,
              45,
              56,
              48,
              51,
              49,
              32,
              120,
              53,
              54,
              52,
              52,
              50,
              34,
              44,
              10,
              32,
              32,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              104,
              105,
              108,
              100,
              101,
              103,
              97,
              114,
              100,
              46,
              111,
              114,
              103,
              34,
              44,
              10,
              32,
              32,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              82,
              111,
              109,
              97,
              103,
              117,
              101,
              114,
              97,
              45,
              67,
              114,
              111,
              110,
              97,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              116,
              99,
              104,
              80,
              104,
              114,
              97,
              115,
              101,
              34,
              58,
              32,
              34,
              77,
              117,
              108,
              116,
              105,
              45,
              108,
              97,
              121,
              101,
              114,
              101,
              100,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              45,
              115,
              101,
              114,
              118,
              101,
              114,
              32,
              110,
              101,
              117,
              114,
              97,
              108,
              45,
              110,
              101,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              98,
              115,
              34,
              58,
              32,
              34,
              104,
              97,
              114,
              110,
              101,
              115,
              115,
              32,
              114,
              101,
              97,
              108,
              45,
              116,
              105,
              109,
              101,
              32,
              101,
              45,
              109,
              97,
              114,
              107,
              101,
              116,
              115,
              34,
              10,
              32,
              32,
              125,
              10,
              125
            ]
          },
          "cookie": [],
          "responseTime": 319,
          "responseSize": 509
        },
        "id": "a4a7de98-811c-4079-bca7-88cb50238787",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response time under 2000ms",
            "skipped": false
          },
          {
            "assertion": "Content-Type is application/json",
            "skipped": false
          },
          {
            "assertion": "User response structure validation",
            "skipped": false
          },
          {
            "assertion": "Email format is valid",
            "skipped": false
          },
          {
            "assertion": "Website format is valid (domain check)",
            "skipped": false
          },
          {
            "assertion": "Phone format is valid",
            "skipped": false
          },
          {
            "assertion": "Address structure validation",
            "skipped": false
          },
          {
            "assertion": "Company structure validation",
            "skipped": false
          },
          {
            "assertion": "User ID 1 has expected values",
            "skipped": false
          },
          {
            "assertion": "User ID is positive number",
            "skipped": false
          },
          {
            "assertion": "Username is valid format",
            "skipped": false
          },
          {
            "assertion": "Zipcode format is valid",
            "skipped": false
          },
          {
            "assertion": "Extract user data",
            "skipped": false
          },
          {
            "assertion": "Log performance metrics",
            "skipped": false
          },
          {
            "assertion": "All validations completed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "954a9dc1-a37e-4288-8938-55865350c553",
          "length": 2,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a4af6d76-5a35-446c-b340-0fb3799bb46d"
        },
        "item": {
          "id": "eea84a96-01b0-4fa2-8e9f-72653056d806",
          "name": "demo",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "2af28140-448e-4de3-9397-16a72475e34d"
              ],
              "host": [
                "webhook",
                "site"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": " {\r\n    \"userId\": 1,\r\n    \"id\": 8,\r\n    \"title\": \"API Testing\",\r\n    \"completed\": true\r\n  }",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "2af28140-448e-4de3-9397-16a72475e34d"
            ],
            "host": [
              "webhook",
              "site"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "632fe747-9bac-446b-8396-0ec35735c56b",
              "system": true
            },
            {
              "key": "Host",
              "value": "webhook.site",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "91",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": " {\r\n    \"userId\": 1,\r\n    \"id\": 8,\r\n    \"title\": \"API Testing\",\r\n    \"completed\": true\r\n  }",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "aa01deca-b424-4e4e-b37a-3c41dfbcbbe1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "server",
              "value": "nginx"
            },
            {
              "key": "content-type",
              "value": "text/html; charset=UTF-8"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            },
            {
              "key": "x-request-id",
              "value": "3949f109-e9a5-41b1-9e33-2ca845771eb8"
            },
            {
              "key": "x-token-id",
              "value": "2af28140-448e-4de3-9397-16a72475e34d"
            },
            {
              "key": "cache-control",
              "value": "no-cache, private"
            },
            {
              "key": "date",
              "value": "Wed, 24 Sep 2025 06:19:03 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              84,
              104,
              105,
              115,
              32,
              85,
              82,
              76,
              32,
              104,
              97,
              115,
              32,
              110,
              111,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              60,
              97,
              32,
              104,
              114,
              101,
              102,
              61,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              119,
              101,
              98,
              104,
              111,
              111,
              107,
              46,
              115,
              105,
              116,
              101,
              47,
              35,
              33,
              47,
              101,
              100,
              105,
              116,
              47,
              50,
              97,
              102,
              50,
              56,
              49,
              52,
              48,
              45,
              52,
              52,
              56,
              101,
              45,
              52,
              100,
              101,
              51,
              45,
              57,
              51,
              57,
              55,
              45,
              49,
              54,
              97,
              55,
              50,
              52,
              55,
              53,
              101,
              51,
              52,
              100,
              34,
              62,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              105,
              110,
              32,
              87,
              101,
              98,
              104,
              111,
              111,
              107,
              46,
              115,
              105,
              116,
              101,
              60,
              47,
              97,
              62,
              46
            ]
          },
          "cookie": [],
          "responseTime": 632,
          "responseSize": 156
        },
        "id": "eea84a96-01b0-4fa2-8e9f-72653056d806"
      }
    ],
    "transfers": {
      "responseTotal": 665
    },
    "failures": [],
    "error": null
  }
}